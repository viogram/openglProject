#version 330 core
struct Material{
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};
struct Light {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
    float constant;
    float linear;
    float quadratic;
};

in vec3 Normal;
in vec3 worldPos;
in vec2 Texcoords;

out vec4 FragColor;

uniform Material material;
uniform Light light;
uniform vec3 viewPos;

void main()
{
    vec3 normal=normalize(Normal);
    float distance=length(light.position-worldPos);
    float attenuation=1.0/(light.constant+light.linear*distance+
                           light.quadratic*distance*distance);
    vec3 lightDir=normalize(light.position-worldPos);
    float theta=dot(lightDir,normalize(-light.direction));
    float epsilon=light.cutOff-light.outerCutOff;
    float intensity=clamp((theta-light.outerCutOff)/epsilon,0,1);


    vec3 diffuse=vec3(texture(material.diffuse,Texcoords))*light.diffuse*max(0,dot(lightDir,normal));
    
    vec3 viewDir=normalize(viewPos-worldPos);
    vec3 halfDir=normalize(viewDir+lightDir);
    vec3 specular=vec3(texture(material.specular,Texcoords))*light.specular*pow(max(0,dot(halfDir,normal)),material.shininess);

    vec3 ambient=vec3(texture(material.diffuse,Texcoords))*light.ambient;

    vec3 result=ambient+(diffuse+specular)*intensity;

    FragColor = vec4(result*attenuation,1.0);
}