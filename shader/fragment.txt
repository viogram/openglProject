#version 330 core
in VS_OUT{
    vec3 worldPos;
    vec3 worldNormal;
    vec2 texCoords;
    vec4 worldPosLightSpace;
} fs_in;

out vec4 FragColor;

uniform sampler2D diffuseTexture;
uniform sampler2D depthMap;
uniform vec3 lightPos;
uniform vec3 viewPos;

float ShadowCalculation(vec4 pos){
    vec3 ndcCoords = pos.xyz/pos.w;
    vec3 screenCoords = ndcCoords*0.5+0.5;
    float closestDepth = texture(depthMap, screenCoords.xy).r;
    float currentDepth = screenCoords.z;
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}

void main()
{
    vec3 color = texture(diffuseTexture, fs_in.texCoords).rgb;
    vec3 normal = normalize(fs_in.worldNormal);
    vec3 lightColor = vec3(1.0);
    // Ambient
    vec3 ambient = 0.3 * color;
    // Diffuse
    vec3 lightDir = normalize(lightPos - fs_in.worldPos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // Specular
    vec3 viewDir = normalize(viewPos - fs_in.worldPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;
    // Shadow
    float shadow = ShadowCalculation(fs_in.worldPosLightSpace);
    vec3 lighting= (ambient+(1.0-shadow)*(diffuse+specular))*color;
    FragColor = vec4(lighting, 1.0);
}