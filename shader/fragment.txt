#version 330 core
in vec2 Texcoords;
in vec3 Normal;
in vec3 worldPos;

out vec4 FragColor;

uniform vec3 camPos;
uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];

uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

const float PI = 3.14159265359;

vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, Texcoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(worldPos);
    vec3 Q2  = dFdy(worldPos);
    vec2 st1 = dFdx(Texcoords);
    vec2 st2 = dFdy(Texcoords);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0){
    return F0 + (1.0-F0)*pow(clamp(1.0-cosTheta,0.0,1.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}   

void main()
{
    vec3 N = getNormalFromMap();
    vec3 V = normalize(camPos-worldPos); 
    float roughness = texture(roughnessMap, Texcoords).r;
    vec3 albedo = texture(albedoMap, Texcoords).rgb;
    float metallic = texture(metallicMap, Texcoords).r;
    float ao = texture(aoMap, Texcoords).r;
    vec3 irradiance = texture(irradianceMap, N).rgb;

    vec3 Lo = vec3(0.0);
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);
    for(int i=0;i<4;i++){
        vec3 L = normalize(lightPositions[i]-worldPos);
        vec3 H = normalize(L+V);
        float distance = length(lightPositions[i]-worldPos);
	float attenuation = 1.0/(distance*distance);
	vec3 radiance = lightColors[i]*attenuation;

	float D = DistributionGGX(N,H,roughness);
	float G = GeometrySmith(N,V,L,roughness);
	vec3 F = fresnelSchlick(max(0,dot(V,H)), F0);

	vec3 nominator = D * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; 
	vec3 BRDF = nominator / denominator;

	vec3 kS = F;
	vec3 kD = vec3(1.0)-kS;
	kD *= 1.0-metallic;
	float NdotL = max(dot(N, L), 0.0);        
        Lo += (kD * albedo / PI + BRDF) * radiance * NdotL;
    }
    vec3 kS = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;	  
    vec3 diffuse = irradiance * albedo;
    vec3 ambient = (kD * diffuse) * ao;

    vec3 color   = ambient + Lo;
    //hdr to ldr
    color = color/(color+vec3(1.0));
    //gamma correction
    color = pow(color,vec3(1.0/2.2));
    FragColor = vec4(color,1.0);
}