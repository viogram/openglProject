#version 330 core
layout(triangles) in;
layout(triangle_strip, max_vertices=3) out;

in VS_OUT{
    vec2 texCoords;
    vec3 worldPos;
    vec3 Normal;
} gs_in[];

out vec2 Texcoords;
out vec3 worldPos;
out vec3 Normal;

uniform float time;

vec3 getNormal(){
    vec3 a=vec3(gl_in[1].gl_Position - gl_in[0].gl_Position);
    vec3 b=vec3(gl_in[2].gl_Position - gl_in[0].gl_Position);
    return normalize(cross(b,a));
}

vec4 explode(vec4 position, vec3 normal){
    float magnitude=2.0;
    vec3 offset=normal * magnitude * (sin(time)+1.0)/2;
    return position + vec4(offset, 0);
}

void main(){
    vec3 normal=getNormal();

    gl_Position=explode(gl_in[0].gl_Position, normal);
    Texcoords=gs_in[0].texCoords;
    worldPos=gs_in[0].worldPos;
    Normal=gs_in[0].Normal;
    EmitVertex();

    gl_Position=explode(gl_in[1].gl_Position, normal);
    Texcoords=gs_in[1].texCoords;
    worldPos=gs_in[1].worldPos;
    Normal=gs_in[1].Normal;
    EmitVertex();

    gl_Position=explode(gl_in[2].gl_Position, normal);
    Texcoords=gs_in[2].texCoords;
    worldPos=gs_in[2].worldPos;
    Normal=gs_in[2].Normal;
    EmitVertex();

    EndPrimitive();
}