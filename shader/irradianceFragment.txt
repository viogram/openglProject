#version 330 core
out vec4 FragColor;
in vec3 localPos;

uniform samplerCube envMap;
const float PI = 3.14159265359;

void main()
{		
    vec3 N = normalize(localPos);
    vec3 up = vec3(0,1,0);
    vec3 T = normalize(up-N*dot(N,up));
    vec3 B = normalize(cross(N,T));
    mat3 TBN = mat3(T,B,N);
    
    float sampleDelat = 0.025;
    float nrSamples = 0.0;
    vec3 irradiance = vec3(0.0);
    for(float phi=0.0; phi<2.0*PI; phi+=sampleDelat){
	for(float theta=0.0; theta<0.5*PI; theta+=sampleDelat){
	    vec3 tangentVec = vec3(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta));
	    vec3 sampleVec = TBN*tangentVec;
	    irradiance += texture(envMap,sampleVec).rgb*sin(theta)*cos(theta);
	    nrSamples++;
	}
    }
    irradiance = irradiance / nrSamples * PI;
    FragColor = vec4(irradiance, 1.0);
}