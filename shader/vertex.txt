#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;

out VS_OUT{
    vec3 worldPos;
    vec2 texCoords;
    vec3 tangentLightPos;
    vec3 tangentViewPos;
    vec3 tangentPos;    
} vs_out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
   gl_Position = projection*view*model*vec4(position, 1.0);
   vs_out.worldPos = vec3(model*vec4(position,1.0));
   vs_out.texCoords = texCoords;

   vec3 T = normalize(mat3(model)*tangent);
   vec3 B = normalize(mat3(model)*bitangent);
   vec3 N = normalize(mat3(transpose(inverse(model)))*normal);
   mat3 TBN = transpose(mat3(T,B,N));
   
   vs_out.tangentLightPos = TBN*lightPos;
   vs_out.tangentViewPos = TBN*viewPos;
   vs_out.tangentPos = TBN*vs_out.worldPos;
}